C++语言中指针的使用规则：
1.基本形式：基类型 *指针变量名 如int *p 是定义一个指针名字叫做P，类型是int类型的；
2.int *pointer_1=2000 是错误的，不能直接把一个值赋给指针变量，指针存放的是变量的地址，如int *p;p=&num;
3.已知P是一个指针，*p就是p所对应的地址里面对应的值；指针变量必须先赋值，再使用；
4.由于函数只能有一个返回值，所以如果有多个返回值的时候可以利用只指针的方式来实现；
5.利用数组名作为实参和新参，传递的是数组的起始地址；（由于传递的只是数组的首地址，所以用数组作为函数参数
必须要有第二个参数：数组的大小）；（用二维数组作为实参和形参的时候，必须指定列的大小，且大小和实参的第二维的大小一样）
6.int *p（定义一个指针P）;p=&L(这个指针指向的是L的地址);*p=100(这个指针指向的地址的值为100，也就是L=100);
7.int a[10];int *p; p=&a[0] (指针指向数组a的第一个元素，也可以写成p=a,因为数组名a代表数组的第一个元素的地址）；
此时P指向第一个元素，那么p+1指向的同一个数组的下一个元素,(p+i)或者(a+i)就是a[i]的地址，所以*(a+i)=*(p+i)=a[i];
8.二维数组 a[m][n]: a[0]表示a[0][0]地址，a[m]表示a[m][0]地址， a[0]+1表示a[0][1]地址，a[m]+n表示a[m][n]地址；
*（a[0]+1）等于a[0][1]的值，而*（a[0]+1)=*(*(a+0)+1);
所以可以类推得到a[i][j]的值为*(a[i]+j)或*(*(a+i)+j);
